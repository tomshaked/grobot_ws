// Generated by gencpp from file grobot_utilities/PatrolGoal.msg
// DO NOT EDIT!


#ifndef GROBOT_UTILITIES_MESSAGE_PATROLGOAL_H
#define GROBOT_UTILITIES_MESSAGE_PATROLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grobot_utilities
{
template <class ContainerAllocator>
struct PatrolGoal_
{
  typedef PatrolGoal_<ContainerAllocator> Type;

  PatrolGoal_()
    : radius(0.0)
    , clockwise(false)
    , num_patrols(0)  {
    }
  PatrolGoal_(const ContainerAllocator& _alloc)
    : radius(0.0)
    , clockwise(false)
    , num_patrols(0)  {
  (void)_alloc;
    }



   typedef float _radius_type;
  _radius_type radius;

   typedef uint8_t _clockwise_type;
  _clockwise_type clockwise;

   typedef uint32_t _num_patrols_type;
  _num_patrols_type num_patrols;





  typedef boost::shared_ptr< ::grobot_utilities::PatrolGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grobot_utilities::PatrolGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PatrolGoal_

typedef ::grobot_utilities::PatrolGoal_<std::allocator<void> > PatrolGoal;

typedef boost::shared_ptr< ::grobot_utilities::PatrolGoal > PatrolGoalPtr;
typedef boost::shared_ptr< ::grobot_utilities::PatrolGoal const> PatrolGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grobot_utilities::PatrolGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grobot_utilities::PatrolGoal_<ContainerAllocator1> & lhs, const ::grobot_utilities::PatrolGoal_<ContainerAllocator2> & rhs)
{
  return lhs.radius == rhs.radius &&
    lhs.clockwise == rhs.clockwise &&
    lhs.num_patrols == rhs.num_patrols;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grobot_utilities::PatrolGoal_<ContainerAllocator1> & lhs, const ::grobot_utilities::PatrolGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grobot_utilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grobot_utilities::PatrolGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grobot_utilities::PatrolGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grobot_utilities::PatrolGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "923e7ebd662f0085a303d0235a0a1450";
  }

  static const char* value(const ::grobot_utilities::PatrolGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x923e7ebd662f0085ULL;
  static const uint64_t static_value2 = 0xa303d0235a0a1450ULL;
};

template<class ContainerAllocator>
struct DataType< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grobot_utilities/PatrolGoal";
  }

  static const char* value(const ::grobot_utilities::PatrolGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 radius\n"
"bool clockwise\n"
"uint32 num_patrols\n"
;
  }

  static const char* value(const ::grobot_utilities::PatrolGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radius);
      stream.next(m.clockwise);
      stream.next(m.num_patrols);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatrolGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grobot_utilities::PatrolGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grobot_utilities::PatrolGoal_<ContainerAllocator>& v)
  {
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clockwise);
    s << indent << "num_patrols: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_patrols);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROBOT_UTILITIES_MESSAGE_PATROLGOAL_H
